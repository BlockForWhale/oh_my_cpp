目的：使用C++模板设计顺序队列的抽象数据类型（ADT）。并在此基础上，使用顺序队列ADT的基本操作，设计并实现简单应用的算法设计。

内容：（1）请参照顺序栈的ADT模板，设计顺序队列的抽象数据类型。（由于该环境目前仅支持单文件的编译，故将所有内容都集中在一个源文件内。在实际的设计中，推荐将抽象类及对应的派生类分别放在单独的头文件中。参考教材、课件，以及网盘中的顺序栈ADT原型文件，自行设计顺序队列的ADT。）



（2）ADT的简单应用：使用该ADT设计并实现若干应用顺序队列的算法设计。



应用：假设某国特工收到一串事先经过加密处理的密码数字（每位数字的范围为0-9），要求按照预先设定的规则将其解码，恢复到原始的状态，方可使用。解码规则如下：首先将第1位数删除，紧接着将第2位数放到这串数的末尾，再将第3位数删除，再将第4位数放到这串数的末尾，再将第5位数删除……直到剩下最后一位数，将最后一位数也删除。最后，按照刚才删除的顺序，把所有这些删除的数，按照删除的顺序重新连在一起就是原始的密码数字。



例如：给定的一串数字是“631758924”， 经过解码处理后，得到原始的密码数字为“615947283”。接收到的数字串内如存在空格，空格不计入位数。



要求设计一个算法，使用顺序队列，设计并实现按照以上规则进行解码的算法。为简单起见，解码结果直接输出即可，无需保存。



参考函数原型：

template<class ElemType>

void decode(SqQueue<ElemType> &S, string &code);



输入说明 :

第一行：待解码的乱码数字（数字串之间可以有空格，不影响解码结果）

输出说明 :

第一行：解码后的原始密码